<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.5.1">Jekyll</generator><link href="http://localhost:4000/atom.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-05-01T02:04:55+09:00</updated><id>http://localhost:4000/</id><title type="html">generousRocky’s tech blog</title><subtitle>대인배 로키의 기술블로그</subtitle><entry><title type="html">EIP-4337 – Ethereum Account Abstraction Audit</title><link href="http://localhost:4000/development/sol4/" rel="alternate" type="text/html" title="EIP-4337 – Ethereum Account Abstraction Audit" /><published>2022-04-29T19:00:00+09:00</published><updated>2022-04-29T19:00:00+09:00</updated><id>http://localhost:4000/development/sol4</id><content type="html" xml:base="http://localhost:4000/development/sol4/">&lt;nav class=&quot;toc&quot;&gt;

&lt;/nav&gt;

&lt;h3 id=&quot;오딧-시리즈-시작하며&quot;&gt;오딧 시리즈 시작하며,&lt;/h3&gt;

&lt;p&gt;솔리디티 책도 2권 정도 읽었고, &lt;a href=&quot;https://docs.soliditylang.org/&quot;&gt;https://docs.soliditylang.org/&lt;/a&gt; 문서도 궁금한 부분은 다 챙겨보았다.&lt;/p&gt;

&lt;p&gt;그동안 스터디를 하면서 Treasure Dao 프로젝트의 Market, Mining 컨트랙트와 Magic Dragon Dao 프로젝트의 Staking &amp;amp; Reward 관련 컨트렉트를 분석해봤는데, 이제는 코드에서 특별히 신택스나 솔리디티 동작을 모르는 경우가 많지는 않았다.&lt;/p&gt;

&lt;p&gt;그래서 좀 더 많은 프로젝트의 코드를, 특히 security와 관련된 부분을 보기 위해서 오픈제플린의 오딧 리포트를 보고 인사이트를 좀 남겨보기로 했다. 오딧 리포트의 모든 항목을 살펴보기 보단 공부 하면서 도움이 될 만한 것들만 볼 예정이다. 리포트에는 단순한 오타나 계산 실수같은것들도 많아서 전체를 다 보는건 큰 의미가 없을 것 같다.&lt;/p&gt;

&lt;h3 id=&quot;eip-4337--ethereum-account-abstraction-audit&quot;&gt;EIP-4337 – Ethereum Account Abstraction Audit&lt;/h3&gt;

&lt;p&gt;이 시리즈의 첫번째 포스트는 &lt;strong&gt;EIP-4337 – Ethereum Account Abstraction Audit&lt;/strong&gt; 이다. 이더리움에서 계정에 추가적인 기능이 들어가는것으로 보인다. 실제로 제안을 살펴본 것은 아니지만, 오딧 리포트를 보니 stake등의 기능이 생기는 것 같다.&lt;/p&gt;

&lt;h4 id=&quot;deposit-manipulation&quot;&gt;Deposit manipulation&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;audit&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Firstly, the new funds &lt;a href=&quot;https://github.com/eth-infinitism/account-abstraction/blob/8832d6e04b9f4f706f612261c6e46b3f1745d61a/contracts/StakeManager.sol#L88&quot;&gt;are added to the caller’s current balance&lt;/a&gt; instead of the current &lt;code class=&quot;highlighter-rouge&quot;&gt;account&lt;/code&gt; balance. This effectively allows anyone to delete the deposit from any account.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;fix&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Fixed in pull request &lt;a href=&quot;https://github.com/eth-infinitism/account-abstraction/pull/50/files&quot;&gt;#50&lt;/a&gt;. The &lt;code class=&quot;highlighter-rouge&quot;&gt;addStakeTo&lt;/code&gt; function was renamed to &lt;code class=&quot;highlighter-rouge&quot;&gt;addStake&lt;/code&gt; and updated such that the caller can only add value to their own stake.&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;note&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;addStakeTo 함수에서 address파라미터를 가지고 deposit mapping에 접근이 가능하다. 따라서 누구나 다른사람 계정의 deposit을 가지고 staking을 할 수 있다. address를 키로 가지는 mapping 변수에 대한 access가 있을 때 에는 msg.sender 혹은 onlyOwner 같은 modifier 로 privilege 체크가 잘 되어있는지 확인해야 한다.&lt;/p&gt;

&lt;h4 id=&quot;token-transfers-may-fail-silently&quot;&gt;Token transfers may fail silently&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;audit&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;DepositPaymaster&lt;/code&gt;
 ignores the token transfer return value when &lt;a href=&quot;https://github.com/eth-infinitism/account-abstraction/blob/8832d6e04b9f4f706f612261c6e46b3f1745d61a/contracts/samples/DepositPaymaster.sol#L53&quot;&gt;adding deposits&lt;/a&gt;, &lt;a href=&quot;https://github.com/eth-infinitism/account-abstraction/blob/8832d6e04b9f4f706f612261c6e46b3f1745d61a/contracts/samples/DepositPaymaster.sol#L89&quot;&gt;withdrawing tokens from the contract&lt;/a&gt; and &lt;a href=&quot;https://github.com/eth-infinitism/account-abstraction/blob/8832d6e04b9f4f706f612261c6e46b3f1745d61a/contracts/samples/DepositPaymaster.sol#L122&quot;&gt;recovering gas costs&lt;/a&gt;. Although many tokens revert on failure, the &lt;a href=&quot;https://eips.ethereum.org/EIPS/eip-20&quot;&gt;token standard&lt;/a&gt; only specifies a boolean return value indicating success or failure. For tokens that return &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;, such as the &lt;a href=&quot;https://etherscan.io/address/0xe41d2489571d322189246dafa5ebde1f4699f498&quot;&gt;0x Protocol Token&lt;/a&gt;, these transfers may fail silently, leading to incorrect internal accounting.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;fix&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Fixed in pull request &lt;a href=&quot;https://github.com/eth-infinitism/account-abstraction/pull/54/files&quot;&gt;#54&lt;/a&gt;. The &lt;code class=&quot;highlighter-rouge&quot;&gt;DepositPaymaster&lt;/code&gt; contract now uses OpenZeppelin’s &lt;code class=&quot;highlighter-rouge&quot;&gt;[SafeERC20](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.5.0/contracts/token/ERC20/utils/SafeERC20.sol)&lt;/code&gt; library functions for token transfers.&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;note:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;ERC20&lt;/em&gt; 에서 transfer 함수의 return값이 true/false인지 체크해봐야 한다. 혹은 오픈제플린의 &lt;em&gt;SafaERC20&lt;/em&gt; 을 쓴다.(실패 시 throw 함)&lt;/p&gt;

&lt;h4 id=&quot;use-of-transfer-function-is-potentially-unsafe&quot;&gt;Use of transfer function is potentially unsafe&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;audit&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;withdrawTo&lt;/code&gt; function in &lt;code class=&quot;highlighter-rouge&quot;&gt;StakeManager&lt;/code&gt; and the &lt;code class=&quot;highlighter-rouge&quot;&gt;transfer&lt;/code&gt; function in &lt;code class=&quot;highlighter-rouge&quot;&gt;SimpleWallet&lt;/code&gt; both uses Solidity’s built-in &lt;code class=&quot;highlighter-rouge&quot;&gt;transfer&lt;/code&gt; function (on &lt;a href=&quot;https://github.com/eth-infinitism/account-abstraction/blob/8832d6e04b9f4f706f612261c6e46b3f1745d61a/contracts/StakeManager.sol#L129&quot;&gt;line 129&lt;/a&gt; and &lt;a href=&quot;https://github.com/eth-infinitism/account-abstraction/blob/8832d6e04b9f4f706f612261c6e46b3f1745d61a/contracts/samples/SimpleWallet.sol#L52&quot;&gt;line 52&lt;/a&gt;, respectively) to send ether to a destination address. The use of &lt;code class=&quot;highlighter-rouge&quot;&gt;transfer&lt;/code&gt; for this purpose is &lt;a href=&quot;https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/&quot;&gt;no longer recommended&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Consider using the &lt;code class=&quot;highlighter-rouge&quot;&gt;call&lt;/code&gt; function or OpenZeppelin’s &lt;a href=&quot;https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.5.0/contracts/utils/Address.sol#L60&quot;&gt;sendValue function&lt;/a&gt;, and adhere to the checks-effects-interactions pattern when sending value to an external address. This pattern is already implemented in &lt;a href=&quot;https://github.com/eth-infinitism/account-abstraction/blob/8832d6e04b9f4f706f612261c6e46b3f1745d61a/contracts/EntryPoint.sol#L80&quot;&gt;the &lt;code class=&quot;highlighter-rouge&quot;&gt;compensate&lt;/code&gt; function&lt;/a&gt; of the &lt;code class=&quot;highlighter-rouge&quot;&gt;EntryPoint&lt;/code&gt; contract.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Update&lt;/strong&gt;: Partially fixed in pull request &lt;a href=&quot;https://github.com/eth-infinitism/account-abstraction/pull/57/files&quot;&gt;#57&lt;/a&gt;. The &lt;code class=&quot;highlighter-rouge&quot;&gt;SimpleWallet&lt;/code&gt; contract’s &lt;code class=&quot;highlighter-rouge&quot;&gt;transfer&lt;/code&gt; function was left unchanged.&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;fix&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Partially fixed in pull request &lt;a href=&quot;https://github.com/eth-infinitism/account-abstraction/pull/57/files&quot;&gt;#57&lt;/a&gt;. The &lt;code class=&quot;highlighter-rouge&quot;&gt;SimpleWallet&lt;/code&gt; contract’s &lt;code class=&quot;highlighter-rouge&quot;&gt;transfer&lt;/code&gt; function was left unchanged.&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;note&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;[https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/](https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/)&quot;&gt;LINK&lt;/a&gt; 에 따르면 solidity의 내장 함수인 transfer는 더이상 쓰는것이 권장되지 않는다. call을 쓰거나 OpenZeppelin의 라이브러리가 제공하는 function을 쓰는게 좋다.&lt;/p&gt;

&lt;h3 id=&quot;ref&quot;&gt;Ref&lt;/h3&gt;

&lt;p&gt;https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit/&lt;/p&gt;</content><author><name>generousRocky</name><email>rockylim@snu.ac.kr</email><uri>https://generousrocky.github.io/</uri></author><summary type="html">OpenZeppelin 오딧 리포트 리뷰#1: EIP-4377</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/images/sol4_1.png" /></entry><entry><title type="html">Proxy-patterns and Upgradable contract in Solidity</title><link href="http://localhost:4000/development/sol3/" rel="alternate" type="text/html" title="Proxy-patterns and Upgradable contract in Solidity" /><published>2022-04-21T19:00:00+09:00</published><updated>2022-04-21T19:00:00+09:00</updated><id>http://localhost:4000/development/sol3</id><content type="html" xml:base="http://localhost:4000/development/sol3/">&lt;nav class=&quot;toc&quot;&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#proxy-pattern&quot; id=&quot;markdown-toc-proxy-pattern&quot;&gt;Proxy pattern&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#writing-upgradable-contracts-using-openzeppelin&quot; id=&quot;markdown-toc-writing-upgradable-contracts-using-openzeppelin&quot;&gt;Writing Upgradable Contracts using OpenZeppelin&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#unstructured-stoage-proxies&quot; id=&quot;markdown-toc-unstructured-stoage-proxies&quot;&gt;Unstructured Stoage Proxies&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#storage-collisions-between-implementation-versions&quot; id=&quot;markdown-toc-storage-collisions-between-implementation-versions&quot;&gt;Storage Collisions Between Implementation Versions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#ref&quot; id=&quot;markdown-toc-ref&quot;&gt;Ref&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/nav&gt;

&lt;h2 id=&quot;proxy-pattern&quot;&gt;Proxy pattern&lt;/h2&gt;

&lt;p&gt;이더리움 스마트 컨트랙트의 가장 큰 단점은 컨트랙트가 배포된 이후에는 소스코드를 수정할 수 없다는것이다. 기존의 중앙화된 서비스들의 대부분은 지속적으로 새로운 기능이 추가되고, 발견되는 버그들의 픽스가 들어가는 등 업데이트가 되지만, 전통적인 이더리움 개발 패턴에서는 이런것들은 불가능하다.&lt;/p&gt;

&lt;p&gt;프록시 패턴은 이러한 업그레이드를 ‘어느정도’ 가능하게 해준다. 키 컨셉은 프록시 컨트렉트가 유저로부터의 access point가 되고, 실제 구현한 logic이 담긴 컨트랙트는 프록시 컨트렉트가 참조한다다. 따라서 logic 컨트랙트에 새로운 기능을 추가하거나 변경하여 새로운 version2 를 만들었다면, 프록시 컨트렉트가 새로운 컨트렉트를 가르키도록 해주기만 하면 된다.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;
	&lt;img src=&quot;http://localhost:4000/images/sol3_2.png&quot; alt=&quot;Drawing&quot; style=&quot;max-width: 80%; height: auto;&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;솔리디티의 fallback function과 delegatecall 은 이러한 프록시 컨트랙을 가능하게 해준다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;fallback function: 스마트 컨트랙트 내에 존재하지 않는 함수를 호출하면 컨트랙트 내 구현된 fallback function이 대신 호출된다. fallback function은 컨트랙트 내 함수의 이름 없이 아래와 같이 구현한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;contract&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myContract&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;delegatecall: 솔리디티의 저수준 함수로 호출하려는 컨트랙트의 함수를 현재 컨트랙트의 환경에서 실행한다. 즉, 호출하는 함수에 의한 스토리지 변화는 현재 컨트랙트(프록시 컨트랙트)에서의 스토리지에 영향을 미치고 로직컨트렉트의 스토리지에는 영향을 미치지 않는다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위와 같은 두 기능을 사용해서 프록시 컨트랙트에 다음과 같은 코드가 들어가있다면(실제로 OpenZeppelin이 제공하는 proxy), 이 코드는 어떤 function call이 들어오던 그것을 파라미터와 함께 logic 컨트랙트로 포워딩 해 줄 것이다.&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;assembly&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// (1) copy incoming call data
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;calldatacopy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calldatasize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// (2) forward call to logic contract
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delegatecall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_impl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calldatasize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;returndatasize&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// (3) retrieve return data
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;returndatacopy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// (4) forward return data back to caller
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;revert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;위의 저수준 코드가 어떻게 동작하는지는 &lt;a href=&quot;https://blog.openzeppelin.com/proxy-patterns/&quot;&gt;Proxy Patterns&lt;/a&gt;과 &lt;a href=&quot;https://docs.openzeppelin.com/upgrades-plugins/1.x/proxies&quot;&gt;Proxy Upgrade Pattern&lt;/a&gt; 문서에 자세하게 설명되어 있다.&lt;/p&gt;

&lt;h2 id=&quot;writing-upgradable-contracts-using-openzeppelin&quot;&gt;Writing Upgradable Contracts using OpenZeppelin&lt;/h2&gt;

&lt;p&gt;위와 같은 이유로, 프록시 기반의 upgraadable contract 에서는 constructor를 쓸 수 없다(contructor를 proxy를 통해 대신 불러줄 수 없으니). 따라서 constructor에서 해주어야 하는 것들을 regular function에서 대신 해주어야 한다.&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;contract&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyContract&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;uint256&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uint256&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;regular function은 contructor와 다르게 여러번 호출될 수 있기에 이를 막기 위해 OpenZeppelin은 &lt;code class=&quot;highlighter-rouge&quot;&gt;initialier&lt;/code&gt; modifier 를 구현해 놓은 &lt;code class=&quot;highlighter-rouge&quot;&gt;Initializable&lt;/code&gt; contract를 제공한다.&lt;/p&gt;

&lt;p&gt;constructor은 호출될 때 상속 구조가 있으면, 해당 contract의 base contract의 constructor까지 호출해 준다. 하지만 이를 regular function으로 대체하였기 때문에 아래와 같이 명시적으로 base contract의 initialize function을 호출 해 주어야 한다.&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// contracts/MyContract.sol
// SPDX-License-Identifier: MIT
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pragma&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solidity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.6.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;contract&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BaseContract&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Initializable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;uint256&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initializer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;contract&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyContract&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BaseContract&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;uint256&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uint256&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initializer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;BaseContract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Do not forget this call!
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;unstructured-stoage-proxies&quot;&gt;Unstructured Stoage Proxies&lt;/h2&gt;

&lt;p&gt;프록시 구조를 통해 storage variable들은 proxy contrat에 저장이 된다. 하지만 procxy contract는 logic contract를 참조하기 위한 address 타입의 변수 &lt;code class=&quot;highlighter-rouge&quot;&gt;_implementation&lt;/code&gt;를 추가적으로 가지고 있어야하는데, 만약 slot1에 이 variable이 저장된다면 다음과 같은 stroage collision 을 발생시킨다.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;
	&lt;img src=&quot;http://localhost:4000/images/sol3_3.png&quot; alt=&quot;Drawing&quot; style=&quot;max-width: 80%; height: auto;&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;OpenZeppelin의 “unstructuted stroage” 프록시 패턴에서는 이 &lt;code class=&quot;highlighter-rouge&quot;&gt;_implementation&lt;/code&gt; 변수를 slot1에 저장하지 않고, Randomized 된 slot에 저장한다. 따라서 Implementation(logic contract)와 storage가 겹칠 가능성은 없다(slot은 2^256만큼 있으므로 수학적으로 매우 낮음).&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;
	&lt;img src=&quot;http://localhost:4000/images/sol3_4.png&quot; alt=&quot;Drawing&quot; style=&quot;max-width: 80%; height: auto;&quot; /&gt;
&lt;/p&gt;

&lt;h2 id=&quot;storage-collisions-between-implementation-versions&quot;&gt;Storage Collisions Between Implementation Versions&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;_implementaion&lt;/code&gt; 변수와의 collision외에도 upgrade version 간의 collision도 발생할 수 있다. 이전 버전의 implementaion에서 사용하고 있는 slot에 새로운 변수를 추가하거나, 변수간의 위치를 변경한다면 collision이 발생한다. 따라서 새로운 stoage variable의 변경은 extension하는 방향으로 upgrade가 되어야 한다.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;
	&lt;img src=&quot;http://localhost:4000/images/sol3_5.png&quot; alt=&quot;Drawing&quot; style=&quot;max-width: 80%; height: auto;&quot; /&gt;
&lt;/p&gt;

&lt;h2 id=&quot;ref&quot;&gt;Ref&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;https://docs.openzeppelin.com/upgrades-plugins/1.x/proxies&lt;/li&gt;
  &lt;li&gt;https://docs.openzeppelin.com/learn/upgrading-smart-contracts&lt;/li&gt;
  &lt;li&gt;https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable&lt;/li&gt;
&lt;/ol&gt;</content><author><name>generousRocky</name><email>rockylim@snu.ac.kr</email><uri>https://generousrocky.github.io/</uri></author><summary type="html">솔리디티 프록시 패턴과 업그레이드 가능한 컨트랙트</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/images/sol3_1.png" /></entry><entry><title type="html">유튜브를 접으면서</title><link href="http://localhost:4000/writing/youtube/" rel="alternate" type="text/html" title="유튜브를 접으면서" /><published>2022-04-20T22:44:20+09:00</published><updated>2022-04-20T22:44:20+09:00</updated><id>http://localhost:4000/writing/youtube</id><content type="html" xml:base="http://localhost:4000/writing/youtube/">&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/channel/UCpY9pb4-S0PwCJBp2r6nOvg&quot;&gt;개발자 맛&lt;/a&gt; 이라는 채널을 2년정도 운영하고 있었다. 사실 마지막 영상이 벌써 10달 전이니 1년 조금 넘게 활동했던 것 같고, 영상은 15개 정도 만들었다. 생각보다 채널이 금방 커져서 2-3달 쯤 되었을 때 바로 수익창출 신청을 할 수 있었고, 지금은 6,400명 정도가 구독하고 있다.&lt;/p&gt;

&lt;p&gt;개발할 때 잘 사용하던 장비나 도구들을 주로 영상으로 만들어서 올렸는데, 정말 심취해서 할때는 퇴근하고 편집, 주말에도 하루종일 편집만 했던 것 같다. 그렇게 몇달 하다보니 책을 읽거나 공부할 시간이 너무 없다는 생각이 들었다. 개인적인 발전 없이 영상만 만들어내는게 별로 좋은 취미같지 않은 생각이 들어서 점점 흥미가 떨어졌고, 광고비를 미리 받은 컨텐츠만 올리고 업로드를 멈췄다.&lt;/p&gt;

&lt;p&gt;기록으로 남기고 싶은건 당분간은 다시 블로그에 업로드 할 예정이다. 요즘은 특히 퇴근한 후나 남는시간에 솔리디티 코드를 보거나 책을 읽기 때문에, 오히려 글로 남기는게 더 좋을것 같다.&lt;/p&gt;

&lt;p&gt;참고로 그동안의 수익은 2년간 $500정도 되어서 카메라 가격도 못건졌고, 고맙게도 열심히 영상을 봐주셨던 구독자분들은 덜렁&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;
	&lt;img src=&quot;http://localhost:4000/images/youtubeEnd2.png&quot; alt=&quot;Drawing&quot; style=&quot;max-width: 80%; height: auto;&quot; /&gt;
&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;
	&lt;img src=&quot;http://localhost:4000/images/youtubeEnd3.png&quot; alt=&quot;Drawing&quot; style=&quot;max-width: 80%; height: auto;&quot; /&gt;
&lt;/p&gt;</content><author><name>generousRocky</name><email>rockylim@snu.ac.kr</email><uri>https://generousrocky.github.io/</uri></author><summary type="html">다시 블로그를 시작하기</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/images/youtubeEnd0.png" /></entry><entry><title type="html">Total gas is really smaller in using memory?</title><link href="http://localhost:4000/development/sol2/" rel="alternate" type="text/html" title="Total gas is really smaller in using memory?" /><published>2022-04-17T19:00:00+09:00</published><updated>2022-04-17T19:00:00+09:00</updated><id>http://localhost:4000/development/sol2</id><content type="html" xml:base="http://localhost:4000/development/sol2/">&lt;nav class=&quot;toc&quot;&gt;

&lt;/nav&gt;

&lt;p&gt;&lt;a href=&quot;https://app.magicdragon.lol/&quot;&gt;Magic Dragon Dao&lt;/a&gt;의 컨트랙트를 스터디하던 중 removeZeroStakes 함수에서 이상한점을 발견했다. for loop 내부의 struct Stake 타입의 변수 s가 storage 키워드로 표시되어 있었다. 아래 s.amount에서 값을 읽어오는 부분 외에는 쓰이는 부분이 없으니 당연히 체인에 기록되는 storage가 아닌 memory를 써야 gas 소모량을 줄일 수 있지 않을까? (Q)&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_removeZeroStakes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shouldRecurse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stakes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uint256&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stakes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_updateStakeDepositAmount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;Stake&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stakes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// here!!!
&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;_removeStake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// Stop looping and start again - we will skip
&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;// out of the look and recurse
&lt;/span&gt;                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stakes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// We didn't remove anything, so stop recursing
&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;shouldRecurse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shouldRecurse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_removeZeroStakes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;더 공부를 하고 난 뒤에 얻어내 위 Q의 정답은 “항상 그런것은 아니다” 이다.&lt;/p&gt;

&lt;p&gt;솔리디티에서 memory 참조 변수에 storage 참조 변수를 어사인(=)하면, 메모리 공간을 확보하기 위한 추가적인 gas를 지불해야한다. 즉, 변수에 access 할 떄 마다 SLOAD보다 코스트가 낮은 MLOAD를 사용할 수 있지만, 메모리 할당을 위한 코스트가 추가적으로 지출된다.&lt;/p&gt;

&lt;p&gt;반대로, storage 참조 변수로 선언하면, 메모리 할당과 관련된 코스트는 없고 한 번의 SLOAD만 실행하면 된다.&lt;/p&gt;

&lt;p&gt;일반적으로 4번의 변수 access 까지는 storage로 선언하는게 좋고, 그 보다 많은 수의 access가 예상될 때에는 memory 로 변수를 선언하는것이 좋다고 한다. [1]&lt;/p&gt;

&lt;p&gt;위 예제에서는 한 번의 access만 있기때문에 &lt;em&gt;Stake storage s&lt;/em&gt; 로 해주는게 이제는 맞아보인다.&lt;/p&gt;

&lt;p&gt;[1] https://ethereum.stackexchange.com/questions/66382/switching-from-storage-to-memory-increases-the-gas-cost&lt;/p&gt;</content><author><name>generousRocky</name><email>rockylim@snu.ac.kr</email><uri>https://generousrocky.github.io/</uri></author><summary type="html">가스비는 정말 memory 변수가 storage 변수보다 저렴할까?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/images/sol2_1.png" /></entry><entry><title type="html">Rules of memory VS storage in Solidity</title><link href="http://localhost:4000/development/sol1/" rel="alternate" type="text/html" title="Rules of memory VS storage in Solidity" /><published>2022-04-15T19:00:00+09:00</published><updated>2022-04-15T19:00:00+09:00</updated><id>http://localhost:4000/development/sol1</id><content type="html" xml:base="http://localhost:4000/development/sol1/">&lt;nav class=&quot;toc&quot;&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#memory-vs-storage&quot; id=&quot;markdown-toc-memory-vs-storage&quot;&gt;memory vs storage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/nav&gt;

&lt;h1 id=&quot;memory-vs-storage&quot;&gt;memory vs storage&lt;/h1&gt;

&lt;h5 id=&quot;컨트렉트-내-사용되는-각각의-변수가--evm-내에서-저장되는-위치는-다음과-같음&quot;&gt;컨트렉트 내 사용되는 각각의 변수가  EVM 내에서 저장되는 위치는 다음과 같음.&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;1 storage: 컨트렉트 내 모든 함수가 사용할 수 있는 전역 메모리 영역, 네트워크 내 모든 노드에 영구적으로 저장된다.&lt;/li&gt;
  &lt;li&gt;2 memory: 컨트렉트 내 모든 함수가 사용가능한 로컬 메모리, function 이 끝나면 사라짐, 휘발성&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;variable의-저장-위치를-정하는-규칙&quot;&gt;variable의 저장 위치를 정하는 규칙&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;1 state variable(global variable)로 선언되는 변수들은 &lt;strong&gt;항상&lt;/strong&gt; 스토리지에 저장&lt;/li&gt;
  &lt;li&gt;2 함수 파라미터로 선언되는 변수들은 &lt;strong&gt;항상&lt;/strong&gt; 메모리에 저장&lt;/li&gt;
  &lt;li&gt;3 함수 내에서 선언되는 변수들은 &lt;strong&gt;기본적으로&lt;/strong&gt; 메모리에 저장,
    &lt;ul&gt;
      &lt;li&gt;3.1 reference 타입(array, struct, string, mapping)의 변수는 &lt;strong&gt;기본적으로&lt;/strong&gt; 스토리지, value 타입(int등 그 외)은 &lt;strong&gt;기본이&lt;/strong&gt; 메모리&lt;/li&gt;
      &lt;li&gt;3.2 reference 타입 변수의 기본 위치를 무시하고 메모리에 저장할 수 있다.&lt;/li&gt;
      &lt;li&gt;3.3 함수 내에서 선언된 reference 타입 &amp;amp; 스토리지 변수는 state variable을 가르켜야 한다.&lt;/li&gt;
      &lt;li&gt;3.4 함수 내에서 선언된 value타입 변수는 스토리지 위치에 저장할 수 없다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// error
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;ul&gt;
      &lt;li&gt;3.5 매핑은 &lt;strong&gt;항상&lt;/strong&gt; 스토리지 위치에 선언된다. 즉, 함수 내에서 메모리로 선언될 수 없음(컴파일 안된다. 스토리지 변수로 만들고, 글로벌 변수를 참조시켜주면 가능.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;mapping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intMapp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;returns&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mapping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intMapp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// error
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;returns&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;mapping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intMapp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// OK
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;4 function 내에서 한 글로벌 변수에 다른 글로벌 변수를 할당하면, 레퍼런스 카피가 아니라 벨류 카피&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;uint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stateVal1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;uint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stateVal2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;stateVal1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stateVal2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// now both are 20.
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;stateVal2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// stateVal1 is still 20, only stateVal2 is 30
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stateVal1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// return 20
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;5 메모리 변수를 스토리지 변수에 할당할 때 에는 레퍼런스 카피가 아니라 벨류 카피&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;uint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stateArr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;uint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;localArr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;stateArr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;localArr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// now, both are [1, 2], [1, 2]
&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;localArr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stateArr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// return 2, not 10
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;6 함수 내 메모리 변수에 global 변수를 할당하면 벨류 카피&lt;/li&gt;
  &lt;li&gt;7 함수 내 메모리 변수에 다른 메모리 변수 할당하면 벨류 카피&lt;/li&gt;
&lt;/ul&gt;</content><author><name>generousRocky</name><email>rockylim@snu.ac.kr</email><uri>https://generousrocky.github.io/</uri></author><summary type="html">솔리디티 memory, storage 변수 규칙 모든것</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/images/sol1_1.png" /></entry><entry><title type="html">HiPC’19 accepted paper</title><link href="http://localhost:4000/research/hipc/" rel="alternate" type="text/html" title="HiPC'19 accepted paper" /><published>2019-12-31T19:00:00+09:00</published><updated>2019-12-31T19:00:00+09:00</updated><id>http://localhost:4000/research/hipc</id><content type="html" xml:base="http://localhost:4000/research/hipc/">&lt;nav class=&quot;toc&quot;&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#1-abstract&quot; id=&quot;markdown-toc-1-abstract&quot;&gt;1. Abstract&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2-get-paper-from-here&quot; id=&quot;markdown-toc-2-get-paper-from-here&quot;&gt;2. get paper from here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/nav&gt;

&lt;h1 id=&quot;1-abstract&quot;&gt;1. Abstract&lt;/h1&gt;
&lt;p&gt;Modern data centers aim to take advantage of high parallelism in storage devices for I/O intensive applications such as storage servers, cache systems, and key-value stores. Key-value stores are the most typical applications that should provide a highly reliable service with high-performance. To increase the I/O performance of key-value stores, many data centers have actively adopted next-generation storage devices such as Non-Volatile Memory Express (NVMe) based Solid State Devices (SSDs). NVMe SSDs and its protocol are characterized to provide a high degree of parallelism. However, they may not guarantee predictable performance while providing high performance and parallelism. For example, heavily mixed read and write requests can result in performance degradation of throughput and response time due to the interference between the requests and internal operations (e.g., Garbage Collection (GC)). To minimize the interference and provide higher performance, this paper presents IsoKV, an isolation scheme for key-value stores by exploiting internal parallelism in SSDs. IsoKV manages the level of parallelism of SSD directly by running application-driven flash management scheme. By storing data with different characteristics in each dedicated internal parallel units of SSD, IsoKV reduces interference between I/O requests. Also, IsoKV synchronizes the LSM-tree logic and data management in SSD to eliminate GC. We implement IsoKV on RocksDB and evaluate it using Open-Channel SSD. Our extensive experiments have shown that IsoKV improves overall throughput and response time on average 1.20× and 43% compared with the existing scheme, respectively.&lt;/p&gt;

&lt;h1 id=&quot;2-get-paper-from-here&quot;&gt;2. get paper from here&lt;/h1&gt;
&lt;p&gt;LINK: &lt;a href=&quot;https://ieeexplore.ieee.org/document/8990456&quot;&gt;here&lt;/a&gt;&lt;/p&gt;</content><author><name>generousRocky</name><email>rockylim@snu.ac.kr</email><uri>https://generousrocky.github.io/</uri></author><summary type="html">IsoKV: An Isolation Scheme for Key-Value Stores by Exploiting Internal Parallelism in SSD</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/images/hipc.png" /></entry><entry><title type="html">YCSB benchmark for modified RocksDB(not for YCSB’s default version)</title><link href="http://localhost:4000/research/ycsbrocksdb/" rel="alternate" type="text/html" title="YCSB benchmark for modified RocksDB(not for YCSB's default version)" /><published>2019-08-17T19:00:00+09:00</published><updated>2019-08-17T19:00:00+09:00</updated><id>http://localhost:4000/research/ycsbrocksdb</id><content type="html" xml:base="http://localhost:4000/research/ycsbrocksdb/">&lt;nav class=&quot;toc&quot;&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#rocksdb-jni-package-generation&quot; id=&quot;markdown-toc-rocksdb-jni-package-generation&quot;&gt;RocksDB jni package generation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#ycsb-compilation&quot; id=&quot;markdown-toc-ycsb-compilation&quot;&gt;YCSB compilation&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#get-ycsb-code-and-configuation&quot; id=&quot;markdown-toc-get-ycsb-code-and-configuation&quot;&gt;get YCSB code and configuation&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#ycsb-compilation-1&quot; id=&quot;markdown-toc-ycsb-compilation-1&quot;&gt;YCSB compilation&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#parameter-settings-under-ycsb&quot; id=&quot;markdown-toc-parameter-settings-under-ycsb&quot;&gt;parameter settings under YCSB&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;/nav&gt;

&lt;p&gt;facebook에서 배포하는 RocksDB버전을 수정 없이 그대로 성능평가하기 위해서는 그냥 YCSB의 &lt;a href=&quot;https://github.com/brianfrankcooper/YCSB/blob/master/rocksdb/README.md&quot;&gt;README&lt;/a&gt; 문서를 참고하면 된다. Maven이 알아서 RocksDB 패키지도 받아서 YCSB를 돌려볼 수 있다.&lt;/p&gt;

&lt;p&gt;하지만 RocksDB의 코드를 고쳐서 내가 수정한 버전의 RocksDB의 성능을 평가하려면 RocksDB를 JAVA로 빌드하여 jni package를 만든 다음 그 패키지를 사용하여 YCSB를 동작시켜야 한다.&lt;/p&gt;

&lt;p&gt;나의 경우 Open-Channel SSD를 RocksDB의 스토리지로 사용하기 위해 RocksDB 스토리지 백엔드를 posix i/o 가 아닌 외부 라이브러리(liblightnvm)을 사용하여 새로운 백엔드를 사용하도록 고쳤고, 앞으로 설명할 내용 외에도 jin function을 몇가지 직접 만드는 추가적인 작업이 필요했다. 하지만 일반적인 코드 수정이나 알고리즘적인 수정의 경우 본 글의 instruction이면 충분할 것 같다.&lt;/p&gt;

&lt;h1 id=&quot;rocksdb-jni-package-generation&quot;&gt;RocksDB jni package generation&lt;/h1&gt;

&lt;p&gt;일단 어떤 버전을 어떻게 수정하였던 정상적으로 동작하는 RocksDB의 소스코드가 필요하다. 다음으로 넘어가기 전에 내가 가지고 있는 RocksDB 소스코드를 &lt;code class=&quot;highlighter-rouge&quot;&gt;make release&lt;/code&gt; 해서 &lt;code class=&quot;highlighter-rouge&quot;&gt;db_bench&lt;/code&gt;가 정상적으로 돌아가는지 확인 해 보자.&lt;/p&gt;

&lt;p&gt;내가 수정한 버전의 RocksDB가 정상적으로 동작한다면, RocksDB를 JAVA compile해야한다.&lt;/p&gt;

&lt;p&gt;RocsDB 소스코드에서 java 디렉토리는 jni package와 관련이 있다. compression method는 5가지를 모두 사용하지는 않으므로 필요한 것만 남기고 주석처리로 없애준다(시간 절약을 위해).&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;다음 예시와 같이 Makefile을 수정한다(snappy compression만 남김).&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-make highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# A version of each $(LIBOBJECTS) compiled with -fPIC and a fixed set of static compression libraries
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;java_static_libobjects&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;patsubst %,jls/%,&lt;span class=&quot;nv&quot;&gt;$(LIBOBJECTS)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CLEAN_FILES&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; jls

&lt;span class=&quot;err&quot;&gt;ifneq&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;($(ROCKSDB_JAVA_NO_COMPRESSION),&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;1)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# JAVA_COMPRESSIONS = libz.a libbz2.a libsnappy.a liblz4.a libzstd.a
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;JAVA_COMPRESSIONS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; libsnappy.a
&lt;span class=&quot;err&quot;&gt;endif&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# JAVA_STATIC_FLAGS = -DZLIB -DBZIP2 -DSNAPPY -DLZ4 -DZSTD
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;JAVA_STATIC_FLAGS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; -DSNAPPY
&lt;span class=&quot;c&quot;&gt;# JAVA_STATIC_INCLUDES = -I./zlib-$(ZLIB_VER) -I./bzip2-$(BZIP2_VER) -I./snappy-$(SNAPPY_VER) -I./lz4-$(LZ4_VER)/lib -I./ zstd-$(ZSTD_VER)/lib
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;JAVA_STATIC_INCLUDES&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; -I./snappy-&lt;span class=&quot;nv&quot;&gt;$(SNAPPY_VER)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;java compile을 위해서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Makefile&lt;/code&gt;의 rocksdbjavastaticrelease rule을 사용한다. cross-platform이 아니므로 해당 line은 comment out 해준다. 이 라인을 지움으로써 cross-platform java package를 취소하였으므로, &lt;code class=&quot;highlighter-rouge&quot;&gt;ibrocksdbjni-*.jnilib&lt;/code&gt;부분을 지워준다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;결과적으로 다음 예시와 같이 Makefile을 수정한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-make highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nl&quot;&gt;rocksdbjavastaticrelease&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rocksdbjavastatic&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# cd java/crossbuild &amp;amp;&amp;amp; vagrant destroy -f &amp;amp;&amp;amp; vagrant up linux32 &amp;amp;&amp;amp; vagrant halt linux32 &amp;amp;&amp;amp; vagrant up linux64 &amp;amp;&amp;amp; vagrant halt linux64
&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;java;jar&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;-cf&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;target/$(ROCKSDB_JAR_ALL)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;HISTORY*.md&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# cd java/target;jar -uf $(ROCKSDB_JAR_ALL) librocksdbjni-*.so librocksdbjni-*.jnilib
&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;java/target;jar&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;-uf&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$(ROCKSDB_JAR_ALL)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;librocksdbjni-*.so&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;java/target/classes;jar&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;-uf&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;../$(ROCKSDB_JAR_ALL)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;org/rocksdb/*.class&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;org/rocksdb/util/*.class&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;정상적으로 Makefile을 수정하였다면, &lt;code class=&quot;highlighter-rouge&quot;&gt;make rocksdbjavastaticrelease&lt;/code&gt; 명령어를 통해 빌드를 해 보자. 만약 코어가 충분하다면 &lt;code class=&quot;highlighter-rouge&quot;&gt;-j16&lt;/code&gt; 과 같은 옵션을 줄 수 있다.&lt;/p&gt;

&lt;p&gt;성공적으로 빌드가 된다면, &lt;code class=&quot;highlighter-rouge&quot;&gt;rocksdb/java/target/rocksdbjni-5.18.3.jar&lt;/code&gt;와 같이 jni package 파일이 생성될 것이다. 여기서 &lt;code class=&quot;highlighter-rouge&quot;&gt;5.18.3&lt;/code&gt;과 같은 버전은 작업하는 RocksDB의 소스코드에 따라 다르게 생성 될 것이다.&lt;/p&gt;

&lt;p&gt;이렇게 생성된 jni package는 이후 YCSB 동작에서 사용된다.&lt;/p&gt;

&lt;h1 id=&quot;ycsb-compilation&quot;&gt;YCSB compilation&lt;/h1&gt;
&lt;h2 id=&quot;get-ycsb-code-and-configuation&quot;&gt;get YCSB code and configuation&lt;/h2&gt;
&lt;p&gt;다음과 같은 명령어를 통해 YCSB 코드를 받는다&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/brianfrankcooper/YCSB.git
git checkout 0.15.0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;YCSB의 code modle dependency들을 다운로드하기 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;YCSB/core/pom.xml&lt;/code&gt; 파일에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/code&gt; 하위 부분에 다음과 같은 내용을 추가한다.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.htrace&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;htrace-core4&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;4.1.0-incubating&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.hdrhistogram&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;HdrHistogram&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.1.4&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;ycsb-compilation-1&quot;&gt;YCSB compilation&lt;/h2&gt;

&lt;p&gt;Maven을 통해 RocksDB 를 바인딩 한다. 주의할 점은 단순히&lt;code class=&quot;highlighter-rouge&quot;&gt;mvm clean package&lt;/code&gt;명령어를 사용하면 모든 데이터베이스 어플리케이션(HBase, MongoDB 등등)의 모듈을 위한 dependency들을 다운로드 하기 때문에 시간이 매우 오래 걸린다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;다음 명령어는 RocksDB를 바인딩 하기위한 명령어 이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mvn -pl com.yahoo.ycsb:rocksdb-binding -am clean package
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;dependency 추가로 인해 &lt;code class=&quot;highlighter-rouge&quot;&gt;YCSB/rocksdb/target/dependency/&lt;/code&gt; 경로에 &lt;code class=&quot;highlighter-rouge&quot;&gt;htrace-core4-4.1.0-incubating.jar&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;HdrHistogram-2.1.4.jar&lt;/code&gt; 파일이 생성되어 있는것을 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;YCSB 디렉토리의 &lt;em&gt;YCSB/pom.xml&lt;/em&gt; 파일에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;rocksdb.version&amp;gt;5.11.3&amp;lt;/rocksdb.version&amp;gt;&lt;/code&gt;부분을 보면, YCSB가 RocksDB의 5.11.3 버전의 jni package를 다운로드 받아 사용한다는 것을 알 수 있다. 이 부분을 수정하면 원하는 버전의 jni package를 받아 YCSB를 돌려볼 수 있다. (하지만 여전히 facebook에서 배포한 버전 그대로이다. 우리가 원하는 것은 직접 소스코드를 수정하여 빌드한 RocksDB의 성능을 평가하고싶은것이다.)&lt;/p&gt;

&lt;p&gt;리눅스 시스템에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;bin/ycsb.sh&lt;/code&gt; 파일을 실행하여 여러가지 YCSB 벤치마크를 조작할 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;다음 명령어를 통해 YCSB-workloada의 데이터를 로드 해 본다. workloada에 대한 configuration은 &lt;code class=&quot;highlighter-rouge&quot;&gt;workloads/workloada&lt;/code&gt; 파일에 명세되어 있으며, 데이터가 저장될 디렉토리도 함께 옵션으로 준다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bin/ycsb.sh load rocksdb -s -P workloads/workloada -p rocksdb.dir&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/home/rocky/ycsbdata
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;LOG파일을 앞 부분을 확인해 보면 아직 YCSB의 디폴트 버전인 5.11.3 버전의 RocksDB가 동작하고 있음을 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(중요!) 이전 과정에서 생성된 jni package 파일인 &lt;code class=&quot;highlighter-rouge&quot;&gt;rocksdb/java/target/rocksdbjni-5.18.3.jar&lt;/code&gt; 을 &lt;code class=&quot;highlighter-rouge&quot;&gt;YCSB/rocksdb/target/dependency/&lt;/code&gt; 경로에 복사한다. 그리고 기존의 &lt;code class=&quot;highlighter-rouge&quot;&gt;rocksdbjni-5.11.3.jar&lt;/code&gt; 파일은 삭제한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이후 RocksDB 데이터 경로인 &lt;code class=&quot;highlighter-rouge&quot;&gt;rocsdb.dir&lt;/code&gt;에 지정 해 주었던 디렉토리 경로의 파일들을 모두 지우고 다시 laod 명령을 해 본다.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bin/ycsb.sh load rocksdb -s -P workloads/workloada -p rocksdb.dir&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/home/rocky/ycsbdata
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;LOG파일의 앞 부분을 보면 원하는 버전의(내가 코드를 고치고 빌드한 버전의) RocksDB가 나타난 것을 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;데이터를 load한 이후에는 여러 workload들을 돌려 성능 평가를 해볼수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;다음 명령어는 &lt;code class=&quot;highlighter-rouge&quot;&gt;home/rocky/ycsbdata&lt;/code&gt; 디렉토리에 존재하는 데이터베이스에 workload-a를 수행한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bin/ycsb.sh run rocksdb -s -P workloads/workloada -p rocksdb.dir&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/home/rocky/ycsbdata
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;parameter-settings-under-ycsb&quot;&gt;parameter settings under YCSB&lt;/h2&gt;

&lt;p&gt;workload들의 default configuration은 Fieldcount와 Filelength가 작아 매우 짧은시간 내에 끝나버리니 충분한 크기로 변경 해 주어야한다. 각 workload 의 parameter는 &lt;code class=&quot;highlighter-rouge&quot;&gt;YCSB/worklaods/&lt;/code&gt; 경로의 파일들을 수정해 변경할 수 있다.&lt;/p&gt;

&lt;p&gt;RocksDB의 여러 parameter및 configuration은 &lt;code class=&quot;highlighter-rouge&quot;&gt;YCSB\rocksdb\src\main\java\com\yahoo\ycsb\db\rocksdb\RocksDBClient.java&lt;/code&gt; 파일에서 설정 해 줄 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;initRocksDB()&lt;/code&gt; 함수 아래 위치한 다음의 코드들은 RocksDB의 option들과 관련된 부분이다. RocksDB 소스코드에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;java/src/main/java/org/rocksdb/Options.java&lt;/code&gt; 파일과 &lt;code class=&quot;highlighter-rouge&quot;&gt;java/src/main/java/org/rocksdb/DBOptions.java&lt;/code&gt; 파일에서 함수의 원형을 참고하여 option을 변경하는 함수를 찾아 원하는 옵션을 변경한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfDescriptors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Options&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;optimizeLevelStyleCompaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setCreateIfMissing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setCreateMissingColumnFamilies&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setIncreaseParallelism&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rocksThreads&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setMaxBackgroundCompactions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rocksThreads&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setInfoLogLevel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InfoLogLevel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;INFO_LEVEL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;dbOptions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RocksDB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rocksDbDir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toAbsolutePath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DBOptions&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DBOptions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setCreateIfMissing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setCreateMissingColumnFamilies&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setIncreaseParallelism&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rocksThreads&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setMaxBackgroundCompactions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rocksThreads&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setInfoLogLevel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InfoLogLevel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;INFO_LEVEL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;dbOptions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ColumnFamilyHandle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cfHandles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RocksDB&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RocksDB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rocksDbDir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toAbsolutePath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cfDescriptors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cfHandles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cfNames&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;COLUMN_FAMILIES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfNames&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ColumnFamily&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfHandles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cfOptionss&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)));&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;만약 &lt;code class=&quot;highlighter-rouge&quot;&gt;RocksDBClient.java&lt;/code&gt; 파일을 수정하였다면 아래 커멘드를 입력하여 다시 바인딩을 한다.(&lt;code class=&quot;highlighter-rouge&quot;&gt;mvn -pl com.yahoo.ycsb:rocksdb-binding -am clean package&lt;/code&gt; 커멘드에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;clean&lt;/code&gt;이 빠졌음.)&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mvn -pl com.yahoo.ycsb:rocksdb-binding -am package
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;이후 다시 생성된 &lt;code class=&quot;highlighter-rouge&quot;&gt;rocksdb/java/target/rocksdbjni-5.11.3.jar&lt;/code&gt; 파일을 삭제한다.
&lt;code class=&quot;highlighter-rouge&quot;&gt;load&lt;/code&gt;나 &lt;code class=&quot;highlighter-rouge&quot;&gt;run&lt;/code&gt; 커멘드를 실행하면, 원하는 옵션으로 RocksDB가 동작하는것을 확인활 수 있을것이다.&lt;/p&gt;</content><author><name>generousRocky</name><email>rockylim@snu.ac.kr</email><uri>https://generousrocky.github.io/</uri></author><summary type="html">코드를 수정한 RocksDB 버전에 YCSB 벤치마크 돌리기</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/images/ycsbrocksdb1.png" /></entry><entry><title type="html">performance Comparion of synchroniztion Operations + Intel Transactional Memory Operation</title><link href="http://localhost:4000/research/synchronization/" rel="alternate" type="text/html" title="performance Comparion of synchroniztion Operations + Intel Transactional Memory Operation" /><published>2019-04-29T19:00:00+09:00</published><updated>2019-04-29T19:00:00+09:00</updated><id>http://localhost:4000/research/synchronization</id><content type="html" xml:base="http://localhost:4000/research/synchronization/">&lt;nav class=&quot;toc&quot;&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#system-specification&quot; id=&quot;markdown-toc-system-specification&quot;&gt;System Specification&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#intelr-xeonr-cpu-e5-2620에서-제공하는-synchronization-operations&quot; id=&quot;markdown-toc-intelr-xeonr-cpu-e5-2620에서-제공하는-synchronization-operations&quot;&gt;Intel(R) Xeon(R) CPU E5-2620에서 제공하는 Synchronization operations&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#experimental-evaluation&quot; id=&quot;markdown-toc-experimental-evaluation&quot;&gt;Experimental Evaluation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/nav&gt;

&lt;h2 id=&quot;system-specification&quot;&gt;System Specification&lt;/h2&gt;

&lt;h3 id=&quot;cpu&quot;&gt;CPU&lt;/h3&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;rocky@dum:~$ &lt;/span&gt;lscpu
Architecture:          	x86_64
CPU op-mode&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:        	32-bit, 64-bit
Byte Order:            	Little Endian
CPU&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:                	32
On-line CPU&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; list:   	0-31
Thread&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; per core:   	2
Core&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; per socket:    	8
Socket&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:             	2
NUMA node&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:          	2
Vendor ID:             	GenuineIntel
CPU family:            	6
Model:                 	79
Model name:            	Intel&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;R&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Xeon&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;R&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; CPU E5-2620 v4 @ 2.10GHz
Stepping:              	1
CPU MHz:               	1200.843
CPU max MHz:           	3000.0000
CPU min MHz:           	1200.0000
BogoMIPS:              	4201.30
Virtualization:        	VT-x
L1d cache:             	32K
L1i cache:             	32K
L2 cache:              	256K
L3 cache:              	20480K
NUMA node0 CPU&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:    	0-7,16-23
NUMA node1 CPU&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:     	8-15,24-31
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;memory&quot;&gt;Memory&lt;/h3&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;rocky@dum:~$ &lt;/span&gt;sudo dmidecode -t 17
&lt;span class=&quot;c&quot;&gt;# dmidecode 3.0&lt;/span&gt;
Getting SMBIOS data from sysfs.
SMBIOS 3.0.0 present.
Memory Device
Array Handle: 0x002A
Error Information Handle: Not Provided
Total Width: 72 bits
Data Width: 64 bits
Size: 8192 MB
Form Factor: DIMM
Set: None
Locator: P1-DIMMA1
Bank Locator: P0_Node0_Channel0_Dimm0
ype: DDR4
Type Detail: Synchronous
Speed: 2400 MHz
Manufacturer: Samsung
Serial Number: 2087B773
Asset Tag: P1-DIMMA1_AssetTag &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;date:17/38&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Part Number: M393A1G40EB1-CRC
Rank: 1
Configured Clock Speed: 2133 MHz
Minimum Voltage: Unknown
Maximum Voltage: Unknown
Configured Voltage: Unknown
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Summary: Intel(R) Xeon(R) CPU E5-2620 v4 @ 2.10GHz. 64아키텍처의 16물리 코어(하이퍼 스레딩, 32 논리 코어) 머신.  NUMA 아키텍처로 2개의 socket(NUMA node)이 있으며, 각 socket당 8개 물리 코어가 있음. 메인 메모리는 DDR4의 8192MB 메모리가 4개 뱅크에 각각 위치하고 있으며 총 메인 메모리 공간은 32GB이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;intelr-xeonr-cpu-e5-2620에서-제공하는-synchronization-operations&quot;&gt;Intel(R) Xeon(R) CPU E5-2620에서 제공하는 Synchronization operations&lt;/h2&gt;

&lt;h3 id=&quot;1-fetch-and-add계열&quot;&gt;1. Fetch And Add계열&lt;/h3&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__sync_fetch_and_add&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__sync_fetch_and_sub&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__sync_fetch_and_or&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__sync_fetch_and_and&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__sync_fetch_and_xor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__sync_fetch_and_nand&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Note: These builtins perform the operation suggested by the name, and returns the value that had previously been in memory.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; tmp &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;ptr; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;ptr &lt;span class=&quot;nv&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; value; &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;tmp; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; tmp &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;ptr; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;ptr &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; ~tmp &amp;amp; value; &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;tmp; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;   // nand
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;2-add-and-fetch계열&quot;&gt;2. Add And Fetch계열&lt;/h3&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__sync_add_and_fetch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__sync_sub_and_fetch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__sync_or_and_fetch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__sync_and_and_fetch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__sync_xor_and_fetch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__sync_nand_and_fetch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Note: These builtins perform the operation suggested by the name, and return the new value.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;ptr &lt;span class=&quot;nv&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; value; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;ptr; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;ptr &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; ~&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;ptr &amp;amp; value; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;ptr; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;   // nand
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;3-compare-and-swap&quot;&gt;3. Compare And Swap&lt;/h3&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__sync_val_compare_and_swap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oldval&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Note: These builtins perform an atomic compare and swap. That is, if the current value of *ptr is oldval, then write newval into *ptr.&lt;/p&gt;

&lt;h3 id=&quot;4-memory-barrier&quot;&gt;4. Memory Barrier&lt;/h3&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;__sync_synchronize&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(...)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Note: This builtin issues a full memory barrier.&lt;/p&gt;

&lt;h3 id=&quot;5-test-and-set&quot;&gt;5. Test And Set&lt;/h3&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__sync_lock_test_and_set&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Note: This builtin, as described by Intel, is not a traditional test-and-set operation, but rather an atomic exchange operation. It writes value into *ptr, and returns the previous contents of *ptr.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__sync_lock_release&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Note: This builtin releases the lock acquired by __sync_lock_test_and_set. Normally this means writing the constant 0 to *ptr.&lt;/p&gt;

&lt;h2 id=&quot;experimental-evaluation&quot;&gt;Experimental Evaluation&lt;/h2&gt;

&lt;p&gt;single thread run과 동기화 기법들인 mutex lock, Compare-and-Swap, Fetch-and-Add, Add-and-Fetch, Test and Set(TAS를 이용한 mutual exclusion), Memory Barrier 총 6 가지를 사용하여 shared variable의 increment 성능 평가를 진행한다. Single thread를 제외한 6가지 방법에서는 32개 thread를 사용하였다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Method&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Results(sec)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Single thread&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;3.041056455s&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Mutex lock&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;133.816444880s&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Fetch-and-Add&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;26.720684224s&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Add-and-Fetch&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;26.909436926s&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Compare-And-Swap&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;101.935627317s&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Test-and-Set&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;1467.726637515s&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Memory Barrier&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;324.967494416s&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;당연히, increment 같은 매우 짧은 task만 수행하므로 스레드 간 동기화 오버헤드가 성능의 대부분을 차지한다. 따라서 전체 elapse time은 single thread가 가장 짧다. 멀티 스레드 동기화가 오퍼레이션 중에는 fet and add 계열이 성능이 가장 좋아보이지만 thread contention 정도에 따라 결과가 다르게 나올 수 있다.&lt;/p&gt;</content><author><name>generousRocky</name><email>rockylim@snu.ac.kr</email><uri>https://generousrocky.github.io/</uri></author><summary type="html">멀티스레드 동기화 방법 비교</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/images/2019-04-29-synchronization/sync.jpeg" /></entry><entry><title type="html">KSC’18 accepted paper</title><link href="http://localhost:4000/research/rocksdb_ocssd_02/" rel="alternate" type="text/html" title="KSC'18 accepted paper" /><published>2018-12-30T19:00:00+09:00</published><updated>2018-12-30T19:00:00+09:00</updated><id>http://localhost:4000/research/rocksdb_ocssd_02</id><content type="html" xml:base="http://localhost:4000/research/rocksdb_ocssd_02/">&lt;nav class=&quot;toc&quot;&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#1-abstract&quot; id=&quot;markdown-toc-1-abstract&quot;&gt;1. Abstract&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2-get-paper-from-here&quot; id=&quot;markdown-toc-2-get-paper-from-here&quot;&gt;2. get paper from here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/nav&gt;

&lt;h1 id=&quot;1-abstract&quot;&gt;1. Abstract&lt;/h1&gt;
&lt;p&gt;고성능 저장장치의 역할은 웹-스케일 인프라에서 점차 더 중요해 지고 있다. 특히 NVMe(Non-Volatile Memory Express) 기반 SSD(Solid State Device)로 대표되는 차세대 저장장치는 데이터센터에 적극적으 로 도입되고 있다. 하지만 데이터센터에서 실행되는 응용프로그램은 이러한 고성능 저장장치의 특징을 고려하지 않는다. 본 논문에서는 NVMe SSD와 같은 고성능 저장장치를 사용하는 LSM-tree(LogStructured Merge tree) 기반의 데이터베이스 시스템에서, 읽기와 쓰기 요청이 혼재되어 있는 워크로드에 서의 성능 저하 현상에 집중한다. 이 문제를 해결하기 위해 본 연구에서는 I/O 작업을 분리하여 처리하 도록 어플리케이션 계층에서의 플래시 관리 기법을 제시한다.&lt;/p&gt;

&lt;h1 id=&quot;2-get-paper-from-here&quot;&gt;2. get paper from here&lt;/h1&gt;

&lt;p&gt;LINK: &lt;a href=&quot;https://github.com/generousRocky/generousRocky.github.io/blob/master/publication/Open%20Channel%20SSD%20%ED%94%8C%EB%9E%AB%ED%8F%BC%EC%97%90%EC%84%9C%20%EC%93%B0%EA%B8%B0%20%EB%B2%84%ED%8D%BC%20%EB%B0%8F%20%EC%8A%A4%EB%A0%88%EB%93%9C%20%EA%B5%AC%EC%84%B1%EC%97%90%20%EB%94%B0%EB%A5%B8%20%EC%84%B1%EB%8A%A5%20%EB%B6%84%EC%84%9D.pdf&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;p&gt;LINK: &lt;a href=&quot;https://github.com/generousRocky/generousRocky.github.io/blob/master/publication/rocky_kcs18.pdf&quot;&gt;here&lt;/a&gt;&lt;/p&gt;</content><author><name>generousRocky</name><email>rockylim@snu.ac.kr</email><uri>https://generousrocky.github.io/</uri></author><summary type="html">플래시 내 I/O 분리 처리를 통한 LSM-tree 기반 데이터베이스 성능 최적화</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/images/rocksdb_02.png" /></entry><entry><title type="html">MWDS’18 accepted paper</title><link href="http://localhost:4000/research/rocksdb_ocssd_01/" rel="alternate" type="text/html" title="MWDS'18 accepted paper" /><published>2018-12-30T19:00:00+09:00</published><updated>2018-12-30T19:00:00+09:00</updated><id>http://localhost:4000/research/rocksdb_ocssd_01</id><content type="html" xml:base="http://localhost:4000/research/rocksdb_ocssd_01/">&lt;nav class=&quot;toc&quot;&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#1-abstract&quot; id=&quot;markdown-toc-1-abstract&quot;&gt;1. Abstract&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2-get-paper-from-here&quot; id=&quot;markdown-toc-2-get-paper-from-here&quot;&gt;2. get paper from here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/nav&gt;

&lt;h1 id=&quot;1-abstract&quot;&gt;1. Abstract&lt;/h1&gt;
&lt;p&gt;The role of high-performance storage devices is becoming increasingly important in the web-scale infrastructure. In particular, nextgeneration storage devices such as Non Volatile Memory Express (NVMe) based solid state devices (SSDs) are being actively introduced to data centers. However, applications running on data centers do not take into account the characteristics of these high-performance storage devices. We focus on the performance degradation of the mixed workload of reads and writes when using high-performance storage devices in the log-structured merge tree (LSM-tree) based database systems. To address this problem, we propose application-driven flash management scheme to isolate read/write operation.&lt;/p&gt;

&lt;h1 id=&quot;2-get-paper-from-here&quot;&gt;2. get paper from here&lt;/h1&gt;
&lt;p&gt;LINK: &lt;a href=&quot;https://github.com/generousRocky/generousRocky.github.io/blob/master/publication/rocky_mwds18.pdf&quot;&gt;here&lt;/a&gt;&lt;/p&gt;</content><author><name>generousRocky</name><email>rockylim@snu.ac.kr</email><uri>https://generousrocky.github.io/</uri></author><summary type="html">Application-Driven Flash Management: LSM-tree based Database Optimization through Read/Write Isolation</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/images/rocksdb_01.png" /></entry></feed>